{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _extends2 = require('babel-runtime/helpers/extends');\nvar _extends3 = _interopRequireDefault(_extends2);\nvar _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');\nvar _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\nvar _inherits2 = require('babel-runtime/helpers/inherits');\nvar _inherits3 = _interopRequireDefault(_inherits2);\nvar _react = require('react');\nvar _react2 = _interopRequireDefault(_react);\nvar _propTypes = require('prop-types');\nvar _propTypes2 = _interopRequireDefault(_propTypes);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar TEST_ENV = 'production' === 'test';\nvar noop = function noop() {};\nvar ScriptTag = function (_Component) {\n  (0, _inherits3.default)(ScriptTag, _Component);\n  ScriptTag.removeNode = function removeNode(node) {\n    if (node) {\n      node.parentNode.removeChild(node);\n    }\n  };\n  function ScriptTag(props, context) {\n    (0, _classCallCheck3.default)(this, ScriptTag);\n    var _this = (0, _possibleConstructorReturn3.default)(this, _Component.call(this, props, context));\n    _this.domRef = null;\n    _this.state = {\n      isHydrated: props.isHydrating,\n      additionalNode: null,\n      removeAdditionalNode: null\n    };\n    return _this;\n  }\n  ScriptTag.prototype.appendAdditionalElement = function appendAdditionalElement() {\n    var _props = this.props,\n      onError = _props.onError,\n      onLoad = _props.onLoad,\n      nonce = _props.nonce;\n\n    // Create a new HTML script element\n\n    var newElement = document.createElement(\"script\");\n\n    // Copy all attribute values\n    for (var i = 0, len = this.domRef.attributes.length; i < len; i++) {\n      var attr = this.domRef.attributes[i];\n      if (attr.nodeName === 'nonce') {\n        // The browser clears the nonce value - grab from props\n        newElement.setAttribute(attr.nodeName, nonce);\n      } else {\n        newElement.setAttribute(attr.nodeName, attr.nodeValue);\n      }\n    }\n\n    // Copy the inner script\n    if (this.domRef.src === '' && this.domRef.innerHTML && this.domRef.innerHTML !== '') {\n      newElement.innerHTML = this.domRef.innerHTML;\n    }\n\n    // Bind event listeners\n    newElement.addEventListener('load', onLoad);\n    newElement.addEventListener('error', onError);\n\n    // Append the new script tag\n    this.domRef.parentNode.appendChild(newElement);\n    return newElement;\n  };\n  ScriptTag.prototype.componentDidMount = function componentDidMount() {\n    var isHydrated = this.state.isHydrated;\n    if (isHydrated) {\n      // was rendered on server, don't replace elements when hydrating\n      return;\n    }\n    this.setState({\n      additionalNode: this.appendAdditionalElement(),\n      removeAdditionalNode: null\n    });\n  };\n  ScriptTag.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    // This logic assumes that the <script> only need to be updated if the 'src' or 'innerHTML' has changed\n    //  - this prevents the <script> from updating unnecessarily, which prevents additional 'onload' events\n\n    // This isn't perfect - but it keeps the component very simple, and should cover most use-cases\n    // Other props SHOULD be assigned at the same time as either the 'src' or 'innerHTML' property\n    // -> If this is to change and support updating on ANY prop change, the 'appendAdditionalElement()' method\n    //    and state management will need to be modified to manipulate the DOM script tag based on each prop change.\n    //    This really complicates the component - for now we'll leave it as is.\n    var _props2 = this.props,\n      src = _props2.src,\n      dangerouslySetInnerHTML = _props2.dangerouslySetInnerHTML;\n    if (src && src === nextProps.src) {\n      // The 'src' attribute has not changed\n      return;\n    }\n    if (dangerouslySetInnerHTML && dangerouslySetInnerHTML.__html === nextProps.dangerouslySetInnerHTML.__html) {\n      // The 'dangerouslySetInnerHTML' attribute has not changed\n      return;\n    }\n    this.setState({\n      removeAdditionalNode: this.state.additionalNode,\n      additionalNode: null\n    });\n  };\n  ScriptTag.prototype.componentWillUpdate = function componentWillUpdate(nextProps, nextState) {\n    ScriptTag.removeNode(nextState.removeAdditionalNode);\n  };\n  ScriptTag.prototype.componentDidUpdate = function componentDidUpdate() {\n    var _state = this.state,\n      additionalNode = _state.additionalNode,\n      removeAdditionalNode = _state.removeAdditionalNode;\n    if (additionalNode === null) {\n      this.setState({\n        additionalNode: this.appendAdditionalElement()\n      });\n    }\n    if (removeAdditionalNode !== null) {\n      // Was removed in 'componentWillUpdate', but can not update state there\n      this.setState({\n        removeAdditionalNode: null\n      });\n    }\n  };\n  ScriptTag.prototype.componentWillUnmount = function componentWillUnmount() {\n    ScriptTag.removeNode(this.state.removeAdditionalNode);\n    ScriptTag.removeNode(this.state.additionalNode);\n  };\n  ScriptTag.prototype.render = function render() {\n    var _this2 = this;\n    var additionalNode = this.state.additionalNode;\n    if (additionalNode !== null) {\n      return null;\n    }\n\n    // The 'isHydrating' prop must NOT be passed to the script tag\n    // eslint-disable-next-line no-unused-vars\n    var _props3 = this.props,\n      isHydrating = _props3.isHydrating,\n      tagProps = (0, _objectWithoutProperties3.default)(_props3, ['isHydrating']);\n    return _react2.default.createElement('script', (0, _extends3.default)({}, tagProps, {\n      ref: function ref(tag) {\n        return _this2.domRef = tag;\n      }\n    }));\n  };\n  return ScriptTag;\n}(_react.Component);\nScriptTag.propTypes = {\n  /**\n   * True if the <ScriptTag> is being hydrated on the client, otherwise false.\n   */\n  isHydrating: _propTypes2.default.bool,\n  // Standard <script> tag props\n  async: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.number]),\n  crossOrigin: _propTypes2.default.string,\n  defer: _propTypes2.default.bool,\n  integrity: _propTypes2.default.string,\n  nonce: _propTypes2.default.string,\n  src: _propTypes2.default.string,\n  text: _propTypes2.default.string,\n  type: _propTypes2.default.string,\n  dangerouslySetInnerHTML: _propTypes2.default.object,\n  // globals\n  onError: _propTypes2.default.func,\n  onLoad: _propTypes2.default.func\n};\nScriptTag.defaultProps = {\n  isHydrating: false,\n  onError: noop,\n  onLoad: noop\n};\nexports.default = ScriptTag;","map":null,"metadata":{},"sourceType":"script"}